[
  {
    "objectID": "old-posts/test-post/index.html",
    "href": "old-posts/test-post/index.html",
    "title": "Test JupyterLab",
    "section": "",
    "text": "import pandas as pd\nimport altair as alt\nfrom palmerpenguins import load_penguins\nfrom IPython.display import HTML\n\npenguins = load_penguins()\n\n\ndef display_centered_chart(c):\n    with alt.renderers.enable(\"default\"):\n        html = c._repr_mimebundle_()[\"text/html\"]\n\n    s = html.replace(\"display: flex;\", \"display: flex;\\n    justify-content: center;\")\n\n    display(HTML(s))\n\n\nc = alt.Chart(penguins).mark_point().encode(\n    x=alt.X('bill_length_mm'),\n    y=alt.Y('bill_depth_mm')\n)\n\ndisplay_centered_chart(c)\n\n\n\n\n\nA line plot on a polar axis\n\n\n\nfrom vega_datasets import data\nsource = data.iowa_electricity()\nalt.Chart(source).mark_area(opacity=0.3).encode(\n  x=\"year:T\",\n  y=alt.Y(\"net_generation:Q\").stack(None),\n  color=\"source:N\"\n)"
  },
  {
    "objectID": "old-posts/primers1/index.html",
    "href": "old-posts/primers1/index.html",
    "title": "Exploring 515F primer targets in archaeal and bacterial SSU rRNA genes",
    "section": "",
    "text": "Microbial ecologists have long considered the 515F SSU rRNA gene PCR primer to be “universal.” That is, the 515F primer is thought to amplify Eukarya, Archaea, and Bacteria. Indeed the target of the 515F primer is well conserved across each domain, however, the there are some differences in the primer target between domains that should be considered when evaluating 515F for use in a microbial diversity studies.\nTo make matters more complicated the 515F primer has changed from its inception to account for new sequence information and it’s not clear from the literature which 515F version is most effective. In this post, we’ll take a look at tbe 515F primer target across a broad diversity of SSU rRNA genes. In subsequent posts we’ll evaluate different 515F versions and we’ll also evaluate reverse primers that can be paired with 515F. While there are excellent tools avaliable for SSU rRNA gene PCR primer analysis (see PrimerProspector, TestPrime), most tools focus on nucleotide frequecies in aligments. In this post, we’ll evaluate 515F by looking at the distribution of 515F target oligos.\nWe’ll use the 99% OTU seed sequences for the GreenGenes database as reference. You can download the GreenGenes files from here. This analysis will focus on Archaea and Bacteria.\nFirst we need to import some python functions and modules as well as load some extensions for the IPython notebook.\n\n%matplotlib inline\n%load_ext rpy2.ipython\nimport matplotlib.pyplot as plt\nimport re\nfrom align import aligner\nfrom skbio import DNA, parse_fasta, SequenceCollection\nimport pandas as pd\n\nEventually we’ll want to explore target sites by their taxonomic affiliation so we need to get the taxonomic information from the GreenGenes files we downloaded (above). The following code is a quick and dirty way to populate a pandas DataFrame with the taxonomic annotations for the gene sequences we’ll be working with.\n\ndef parse_tax(line):\n    id, tax_str = line.split(\"\\t\")\n    k, p, c, o, f, g, s = tax_str.rstrip().split(\";\")\n    tax_dict = {\"kingdom\" : k.split(\"__\")[1],\n                \"phylum\"  : p.split(\"__\")[1],\n                \"class\"   : c.split(\"__\")[1],\n                \"family\"  : f.split(\"__\")[1],\n                \"order\"   : o.split(\"__\")[1],\n                \"genus\"   : g.split(\"__\")[1],\n                \"species\" : s.split(\"__\")[1],\n                \"id\"      : id}\n    return tax_dict\n    \n\ndf = pd.DataFrame.from_records([parse_tax(line) for line in \n                                open(\"data/gg_13_5_otus/taxonomy/99_otu_taxonomy.txt\")])\n\ndf.set_index(\"id\", inplace=True)\n\nNow that we have the taxonomy for each sequence, let’s get the 515F target site. To do this we just align one combination of the degenerate 515F primer to each SSU rRNA gene sequence. We then pull out the aligned region from the SSU rRNA gene sequence – this is the 515F target! I’m using the glocal method for the Python aligner package for the alignment and I’m using scikit-bio to parse and manage the SSU rRNA gene sequenes.\n\nfn = \"data/gg_13_5_otus/rep_set/99_otus.fasta\"\ndegens = DNA.iupac_degenerate_characters()\nseqs = SequenceCollection.from_fasta_records([(n, s) for n, s in parse_fasta(fn) \n                                              if not any(i in s for i in degens)], \n                                             DNA)\n\nids = [seq[0] for seq in seqs.iteritems()]\n\n\n%%time\nF515 = DNA(\"GTGCCAGCCGCCGCGGTAA\") #GTGCCAGCMGCCGCGGTAA  M = [CA]\n\nprimer_targets_515 = [aligner(F515.sequence, \n                              seq[1].sequence,\n                              method = \"glocal\")[1] \n                      for seq in seqs.iteritems()]\n\nCPU times: user 20min 29s, sys: 112 ms, total: 20min 30s\nWall time: 20min 31s\n\n\nNow we can join our target and taxonomy information into a single DataFrame. Each row represents one target from one gene. Specifically, each row has the target sequence and corresponding taxonomic information.\n\ndf_targets = df.join(pd.Series(primer_targets_515, index=ids, name = \"515F\"), how = \"left\")\ndf_targets.dropna(axis=0, subset=[\"515F\"], inplace=True)\n\nI love pandas but I think for this application it will be best to use the (mind-blowingly amazing) R package dplyR. So, we need to push our pandas DataFrame into an R session. I’m using the rmagic functions from IPython/rpy2 to move from Python to R.\n\n%R -i df_targets\n\n\n%%R\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(ggthemes)\nlibrary(magrittr)\n\nOk, now we can make some figures! Let’s first look at the ten most abundant archaeal and bacterial 515F targets. You can see below that the bacterial 515F targets are dominated by a single sequence, and, that although the nineteen targets are similar in sequence there is little overlap in target representation between Archaea and Bacteria.\n\n\nCode\n%%R -w 600\nd = df_targets %&gt;%\n    group_by(kingdom, X515F) %&gt;%\n    summarize(count = n()) %&gt;%\n    filter(rank(desc(count), ties.method = \"random\") &lt;= 10) %&gt;%\n    arrange(desc(count), kingdom) %&gt;%\n    mutate(X515F = factor(X515F, levels = unique(.$X515F)))\n\np = ggplot(d, aes(x = X515F, y = count))\n\np = p + facet_wrap(~kingdom, ncol = 1, scales = \"free_y\")\n\np = p + geom_bar(stat = \"identity\", fill = \"#14979B\")\n\np = p + labs(x = \"\")\n\np = p + scale_y_log10()\n\np = p + theme_bw()\n\np = p + theme(axis.text.x = element_text(angle = 60, hjust = 1, size = 12),\n              axis.text.y = element_text(size = 12),\n              axis.title = element_text(size = 16),\n              strip.background = element_blank(),\n              strip.text = element_text(size = 16))\n                                    \np\n\n\n\n\n\n\n\n\n\nIf we dig a little deeper into to archaeal 515F targets, we see some interesting trends among phyla. There are very few Nanoarchaea sequences in the reference database but they all have the same 515F target sequence which appears to be unique to Nanoarchaea. Also, there are a couple relatively abundant 515F target sequences with insertions. Eight of the ten most abundant archaeal 515F targets are identical over the last six nucleotides at the 3’ end of the 515F primer.\n\n\nCode\n%%R -h 550 -w 400\nd = df_targets %&gt;%\n    filter(kingdom == \"Archaea\", phylum != \"\") %&gt;%\n    {\n        top10 = group_by(., X515F) %&gt;%\n            summarize(count = n()) %&gt;%\n            filter(rank(desc(count), ties.method = \"random\") &lt;= 10) %&gt;%\n            extract2(\"X515F\") %&gt;% \n            unique %&gt;%\n            as.character\n        filter(., X515F %in% top10) \n    } %&gt;%\n    group_by(phylum, X515F) %&gt;%\n    summarize(count = n()) %&gt;%\n    {\n        psort = group_by(., X515F) %&gt;%\n            summarize(S = sum(count)) %&gt;%\n            arrange(desc(S)) %&gt;%\n            extract2(\"X515F\") %&gt;% as.character\n        mutate(., X515F = factor(X515F, levels = psort))\n    }\n\np = ggplot(d, aes(x = X515F, y = count))\n\np = p + facet_wrap(~phylum, ncol = 1, scales = \"free_y\")\n\np = p + geom_bar(stat = \"identity\", fill = \"#14979B\")\n\np = p + labs(x = \"\")\n\np = p + scale_y_log10()\n\np = p + theme_bw()\n\np = p + theme(axis.text.x = element_text(angle = 60, hjust = 1, size = 12),\n              axis.text.y = element_text(size = 12),\n              axis.title = element_text(size = 16),\n              strip.background = element_blank(),\n              strip.text = element_text(size = 16))\n\np\n\n\n\n\n\n\n\n\n\nThe Bacteria appear to be dominated by a single target sequence (above). Let’s get that sequence explicitly.\n\n%%R\nmax.target = df_targets %&gt;%\n    filter(kingdom == \"Bacteria\") %&gt;%\n    group_by(X515F) %&gt;%\n    summarize(count = n()) %&gt;%\n    arrange(desc(count)) %&gt;%\n    filter(rank(desc(count)) == 1) %&gt;%\n    extract2(\"X515F\") %&gt;% as.character\n\npaste(\"The most abundant target sequence among bacteria is\", max.target)\n# &lt;!-- collapse=True --&gt;\n\n[1] \"The most abundant target sequence among bacteria is GTGCCAGCAGCCGCGGTAA\"\n\n\nThere are some phyla, however, that are not as dominated by the most abundant bacterial 515F target. Here is a histogram of representation (percentages of total targets) within phylum for the most abundant bacterial 515F target. You can see that there are nine phyla for which the most abundant 515F bacterial target represents less than 80% of total targets.\n\n%%R -h 350\ndf_targets %&gt;%\n    filter(kingdom == \"Bacteria\", phylum != \"\" ) %&gt;%\n    group_by(phylum, X515F) %&gt;%\n    summarize(count = n()) %&gt;%\n    group_by(phylum) %&gt;%\n    mutate(count.relative = count / sum(count)) %&gt;%\n    filter(X515F == max.target) %&gt;%\n    extract2(\"count.relative\") %&gt;% hist(breaks = 50,\n                                        main = \"Histogram of most abundant target representation in phlya\")\n# &lt;!-- collapse=True --&gt;\n\n\n\n\n\n\n\n\nLet’s see what the 515F targets look like for those nine phyla (above). The plot below shows the five most abundant 515F targets ranked by max representation within a phylum for the nine selected phyla. You can see that FCPU426, WS5, and GN01 515F targets are still dominated by the most abundant 515F target across all bacteria (GTGCCAGCAGCCGCGGTAA). The TM7 phylum 515F targets differ from the most abundant target at the 3’ end of the 515F primer.\n\n\nCode\n%%R -w 600 -h 500\nd = df_targets %&gt;%\n    filter(kingdom == \"Bacteria\", phylum != \"\" ) %&gt;%\n    group_by(phylum, X515F) %&gt;%\n    summarize(count = n()) %&gt;%\n    group_by(phylum) %&gt;%\n    mutate(count.relative = count / sum(count)) %&gt;%\n    {\n        keep = filter(., X515F == max.target, count.relative &lt;= 0.80) %&gt;%\n            extract2(\"phylum\") %&gt;% \n            unique %&gt;%\n            as.character\n        filter(., phylum %in% keep)\n    } %&gt;%\n    {\n        top = group_by(., X515F) %&gt;%\n            summarize(m = max(count.relative)) %&gt;%\n            filter(rank(desc(m), ties.method = \"random\") &lt;= 5) %&gt;%\n            arrange(desc(m)) %&gt;%\n            extract2(\"X515F\") %&gt;% \n            unique %&gt;%\n            as.character\n        filter(., X515F %in% top) %&gt;% mutate(X515F = factor(X515F, levels = top))\n    }\n\np = ggplot(d, aes(x = X515F, y = count.relative))\n\np = p + facet_wrap(~phylum, ncol = 3, scales = \"free_y\")\n\np = p + geom_bar(stat = \"identity\", fill = \"#14979B\")\n\np = p + labs(x = \"\")\n\np = p + theme_bw()\n\np = p + theme(axis.text.x = element_text(angle = 65, hjust = 1, size = 12),\n              axis.text.y = element_text(size = 12),\n              axis.title = element_text(size = 16),\n              strip.background = element_blank(),\n              strip.text = element_text(size = 16))\n\np\n# &lt;!-- collapse=True --&gt;\n\n\n\n\n\n\n\n\n\nI would guess that these nine phyla are the most likely to be missed by commonly used variants of 515F primers.\nIn the next post we’ll test that hypothesis by evaluating how well the 515F primer matches the targets we’ve identified…"
  },
  {
    "objectID": "old-posts.html",
    "href": "old-posts.html",
    "title": "chuckpr blog",
    "section": "",
    "text": "Note\n\n\n\n↓ These are posts from a previous iteration of this blog.\n\n\n\n\n\n\n\n\n\n Sep 20, 2024 — Post With Code \n\n\n Sep 20, 2024 — Test JupyterLab \n\n\n Apr 17, 2015 — Evaluating 515F primers \n\n\n Apr 14, 2015 — Exploring 515F primer targets in archaeal and bacterial SSU rRNA genes \n\n\n\nNo matching items"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "chuckpr blog",
    "section": "",
    "text": "About this blog"
  },
  {
    "objectID": "TODO.html",
    "href": "TODO.html",
    "title": "chuckpr blog",
    "section": "",
    "text": "add .envrc and activat blog environment\nadd old primers2 post"
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "This is the first post in a Quarto blog. Welcome!\n\nSince this post doesn’t specify an explicit image, the first image in the post will be used in the listing page of posts."
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Post With Code",
    "section": "",
    "text": "This is a post with executable code.\n\n\n\n\nprint(\"ONE\")\n\n[1] \"ONE\"\n\n\n\n\n\nprint(\"ONE\")\n\n[1] \"ONE\""
  },
  {
    "objectID": "til.html",
    "href": "til.html",
    "title": "chuckpr blog",
    "section": "",
    "text": "Sep 26, 2024 — Pivot longer-ing in Polars \n\n\n\nNo matching items"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "chuckpr blog",
    "section": "",
    "text": "Sep 20, 2024 — Post With Code \n\n\n Sep 17, 2024 — Welcome To My Blog \n\n\n\nNo matching items"
  },
  {
    "objectID": "til/pivot-longer-polars/index.html",
    "href": "til/pivot-longer-polars/index.html",
    "title": "Pivot longer-ing in Polars",
    "section": "",
    "text": "The Polars equivalent for pivot_longer from dplyR is melt.\n\ndplyrR example (R)\n\nsuppressPackageStartupMessages(\n  library('tidyverse')\n)\n\notter_data = read_csv(\n  'https://raw.githubusercontent.com/jcoliver/learn-r/gh-pages/data/otter-mandible-data.csv',\n  col_types = cols()\n)\n\notter_data |&gt;\n  pivot_longer(cols = matches('m\\\\d')) |&gt;\n  head() |&gt;\n  gt::gt()\n\n\n\n\n\n\n\nspecies\nmuseum\naccession\nname\nvalue\n\n\n\n\nA. cinerea\nAMNH\n101458\nm1\n15.100\n\n\nA. cinerea\nAMNH\n101458\nm2\n27.790\n\n\nA. cinerea\nAMNH\n101458\nm3\n21.885\n\n\nA. cinerea\nAMNH\n101458\nm4\n13.010\n\n\nA. cinerea\nAMNH\n101458\nm5\n10.500\n\n\nA. cinerea\nAMNH\n101458\nm6\n61.635\n\n\n\n\n\n\n\n\n\nPolars example (Python)\n\nimport polars as pl\nfrom great_tables import GT\n\n(\n  pl.read_csv(\n    'https://raw.githubusercontent.com/jcoliver/learn-r/gh-pages/data/otter-mandible-data.csv',\n    null_values='NA'\n  )\n  .melt(id_vars=['species', 'museum', 'accession'])\n  .head()\n  .pipe(lambda df_: GT(df_))\n)\n\n\n\n\n\n\n\nspecies\nmuseum\naccession\nvariable\nvalue\n\n\n\n\nA. cinerea\nAMNH\n101458\nm1\n15.1\n\n\nA. cinerea\nAMNH\n101461\nm1\n12.74\n\n\nA. cinerea\nAMNH\n101466\nm1\n12.425\n\n\nA. cinerea\nAMNH\n101635\nm1\n13.4\n\n\nA. cinerea\nAMNH\n101459\nm1\n14.4"
  },
  {
    "objectID": "old-posts/post-with-code/index.html",
    "href": "old-posts/post-with-code/index.html",
    "title": "Post With Code",
    "section": "",
    "text": "This is a post with executable code."
  },
  {
    "objectID": "old-posts/primers2/index.html",
    "href": "old-posts/primers2/index.html",
    "title": "Evaluating 515F primers",
    "section": "",
    "text": "Before we begin, I stumbled across this really great blog post from the Knight lab that you should definitely check out if you’re interested in SSU rRNA gene primers. They have some experimental data up which is great to see.\nLet’s start by summarizing a few key findings from the last post.\n\nThe 515F target in Bacteria is extremely conserved – one sequence is found many many times more than any other.\nAlthough the bacterial 515F targets are predominantly one sequence, the second and third most abundant bacterial 515F targets differ from the most abundant target near the 3’ end.\nThe 515F targets in Archaea and Bacteria have little overlap.\nArchaeal 515F targets are more evenly distributed than bacterial 515F targets.\nThe Nanoarchaea appear to have a diagnostic 515F sequence.\n\nBased on these findings we might ask a few questions:\n\nDoes the 515F primer account for the 3’ differences between the three most abundant bacterial targets? If not, what are the implications?\nDoes 515F hit Archaea and Bacteria equally well?\nDoes 515F hit Nanoarchaea in particular?\n\nThe questions above imply one version of 515F. In reality, the 515F primer has been modified over time so we should address those questions over a representative collection of 515F primers.\nIn this post we’ll look at two 515F versions and propose an updated version and see how it compares. Let’s evaluate the 515F version used by Bates et al. (2010) because the authors provide a nice primer analysis in their paper. We’ll also look at the 515F version that is on the Earth Microbiome Project (EMP) website.\nI’m just going to use the regex Python module (here) to evaluate the primers. We need to represent the primers with the degeneracy in regular expression syntax. The {e} at the end will allow us to enable fuzzy matching.\n\nversions = {\"EMP\" : \"(GTG[CT]CAGC[CA]GCCGCGGTAA){e}\", \n            \"Bates\" : \"(GTGCCAGC[CA]GCCGCGGTAA){e}\"}\n\nOk, let’s bring in the Python modules we need and some IPython extensions.\n\n%matplotlib inline\n%load_ext rpy2.ipython\nimport matplotlib.pyplot as plt\nfrom align import aligner\nfrom skbio import DNA, parse_fasta, SequenceCollection\nimport pandas as pd\nimport regex\n\n\n%%R\nlibrary(ggplot2)\nlibrary(dplyr); library(tidyr)\nlibrary(magrittr)\nlibrary(RColorBrewer)\nlibrary(gridExtra)\n\nWe’ll make the same 515F target dataframe as in the previous post.\n\ndef parse_tax(line):\n    id, tax_str = line.split(\"\\t\")\n    k, p, c, o, f, g, s = tax_str.rstrip().split(\";\")\n    tax_dict = {\"kingdom\" : k.split(\"__\")[1],\n                \"phylum\"  : p.split(\"__\")[1],\n                \"class\"   : c.split(\"__\")[1],\n                \"family\"  : f.split(\"__\")[1],\n                \"order\"   : o.split(\"__\")[1],\n                \"genus\"   : g.split(\"__\")[1],\n                \"species\" : s.split(\"__\")[1],\n                \"id\"      : id}\n    return tax_dict\n    \n\ndf = pd.DataFrame.from_records([parse_tax(line) for line in \n                                open(\"data/gg_13_5_otus/taxonomy/99_otu_taxonomy.txt\")])\n\ndf.set_index(\"id\", inplace=True)\n\nfn = \"data/gg_13_5_otus/rep_set/99_otus.fasta\"\ndegens = DNA.iupac_degenerate_characters()\nseqs = SequenceCollection.from_fasta_records([(n, s) for n, s in parse_fasta(fn) \n                                              if not any(i in s for i in degens)], \n                                             DNA)\n\nids = [seq[0] for seq in seqs.iteritems()]\n\nF515 = DNA(\"GTGCCAGCCGCCGCGGTAA\") #GTGCCAGCMGCCGCGGTAA  M = [CA]\n\nprimer_targets_515 = [aligner(F515.sequence, \n                              seq[1].sequence,\n                              method = \"glocal\")[1] \n                      for seq in seqs.iteritems()]\n\ndf_targets = df.join(pd.Series(primer_targets_515, index=ids, name = \"515F\"), how = \"left\")\ndf_targets.dropna(axis=0, subset=[\"515F\"], inplace=True)\n\nOk, now the fun stuff. Let’s define a function that counts substitutions between the target and the primer. If there’s an indel in the target, this function returns an empty string. Eventually we’ll pass this dataframe into R and it’s easy to replace empty strings with R NA values. One quick note: we’ll just be working with the ten most abundant targets in Bacteria and Archaea for the following figures.\n\ndef count_subs(s, primer_regex):\n    subs, ins, dels = regex.fullmatch(primer_regex, s).fuzzy_counts\n    if ins or dels:\n        return \"\"\n    else:\n        return subs\n\nNow we’ll add a column to the target dataframe for each primer version. The values are the number of substitutions between the target and the primer.\n\nfor key in versions:\n    df_targets[key] = df_targets[\"515F\"].apply(lambda x: count_subs(x, versions[key]))\n\nPush the dataframe into R and we’re ready to go! I want to make a figure that conveys three bits of information:\n\nThe target,\nthe number of mismatches between the primer and the target, and\nthe representation of the target in selected taxonomic groups.\n\nSo, let’s make a heatmap (sort of) figure where columns are targets (10 most abundant archaeal and bacterial), rows represent 515F primer versions and the color of each cell represents the mismatches between primer and target. We can scale the size of each cell to the count of each target within the given taxon (log scaled).\n\n%R -i df_targets\n\n\n\nCode\n%%R -w 650\nd = df_targets %&gt;%\n    group_by(kingdom, X515F) %&gt;%\n    summarize(count = n(), EMP = first(EMP), Bates = first(Bates)) %&gt;%\n    filter(rank(desc(count), ties.method = \"random\") &lt;= 10) %&gt;%\n    arrange(desc(count), kingdom) %&gt;%\n    mutate(X515F = factor(X515F, levels = unique(.$X515F))) %&gt;% \n    {\n        .[.==\"\"] = NA\n        .\n    } %&gt;%\n    gather(key, value, -count, -kingdom, -X515F)\n\np = ggplot(d, aes(x = X515F, y = key, size = log(count), fill = value))\n\np = p + facet_wrap(~kingdom, ncol = 1, scales = \"free_y\")\n\np = p + geom_point(shape = 22)\n\np = p + scale_size_area(max_size = 14)\n\np = p + scale_fill_manual(values = brewer.pal(4,\"RdYlBu\"), na.value = \"grey70\")\n\np = p + labs(x = \"\", y = \"\", fill = \"# mismatches\")\n\np = p + theme_bw()\n\np = p + theme(axis.text.x = element_text(angle = 65, hjust = 1, size = 14, family = \"mono\"),\n              axis.text.y = element_text(size = 12),\n              axis.title = element_text(size = 16),\n              strip.background = element_blank(),\n              strip.text = element_text(size = 16),\n              legend.text = element_text(size = 12),\n              legend.title = element_text(size = 16))\n\np = p + guides(fill = guide_legend(override.aes=list(size=5)), size = FALSE)\n\np\n\n\n\n\n\n\n\n\n\nCool! You can see that the EMP primer has improved zero mismatch coverage of Archaea (also discussed in this post). There are still mismatches at the 3’ end between second and third most abundant bacterial 515F targets with each primer version.\nLet’s explore what the implications of the 3’ end mismatch between primers and bacterial targets might be. I want to look at how each primer hits bacterial phyla. Let’s define a function to make this plot. The function will take a couple arguments. One argument will specify the taxon to plot (right now just Bacteria or Archaea) and the other will specify the primer. In this figure rows will be targets (10 most abundant targets) and columns will be taxa. The colors will represent mismatches against the selected primer. Size will be based on relative abundance for the target within the given column. These figures are somewhat small but you can zoom in by right clicking and opening the figure in a new browser window or tab.\n\n\nCode\n%%R -w 1300 -h 1000\nprimer_plot = function(taxon = \"Bacteria\", primer = \"EMP\") {\n    d = df_targets %&gt;%\n        {\n            .[.==\"\"] = NA\n            .\n        } %&gt;%\n        filter(!is.na(phylum), kingdom == taxon) %&gt;%\n        {\n            psort = group_by(., phylum) %&gt;% \n                summarize(count = n()) %&gt;% \n                arrange(desc(count)) %&gt;%\n                extract2(\"phylum\") %&gt;% as.character\n            mutate(., phylum = factor(phylum, levels = psort))\n        } %&gt;%\n        group_by(phylum, X515F) %&gt;%\n        do(summarize(., count = n(), primer = first(.[[primer]]))) %&gt;%\n        group_by(phylum) %&gt;%\n        mutate(count.relative = count / sum(count)) %&gt;%\n        {\n            keep = group_by(., X515F) %&gt;%\n                summarize(tmp = sum(count)) %&gt;%\n                filter(rank(desc(tmp), ties.method = \"random\") &lt;= 10) %&gt;%\n                arrange(tmp) %&gt;%\n                extract2(\"X515F\") %&gt;% as.character\n            filter(., X515F %in% keep) %&gt;%\n                mutate(X515F = factor(X515F, levels = keep), primer = factor(primer, levels = 0:4))\n        }\n\n\n    p = ggplot(d, aes(x = X515F, y = phylum, size = log(count.relative), fill = primer))\n               \n    p = p + geom_point(shape = 22, alpha = 0.75)\n\n    p = p + labs(x = \"\", y = \"\", fill = \"# mismatches\")\n\n    p = p + scale_fill_manual(values = brewer.pal(4,\"RdYlBu\"), na.value = \"grey70\")\n    \n    p = p + ggtitle(paste(\"Figure for the \", primer, \"515F primer\"))\n\n    p = p + theme_bw()\n\n    p = p + theme(axis.text.x = element_text(angle = -90, hjust = 0, vjust = 0.5, size = 12),\n                  axis.text.y = element_text(size = 16, family = \"mono\"),\n                  axis.title = element_text(size = 16),\n                  strip.background = element_blank(),\n                  legend.text = element_text(size = 12),\n                  legend.title = element_text(size = 16),\n                  strip.text = element_blank())\n\n    p = p + guides(fill = guide_legend(override.aes=list(size=5)), size = FALSE)\n\n    p = p + coord_flip()\n\n    p\n}\n\ngrid.arrange(primer_plot(), primer_plot(primer = \"Bates\"), nrow = 2)\n\n\n\n\n\n\n\n\n\nAs you can see, the 3’ mismatch will probably effect recovery of TM7 as well as a smattering of sequences throughout the most abundant phyla.\nWe can make the same plot for Archaea. This highlights how the EMP 515F version hits the Crenarchaea with zero mismatches but neither primer matches the Nanoarchaea targets well.\n\n%%R -w 1200 -h 400\ngrid.arrange(primer_plot(taxon = \"Archaea\"), \n             primer_plot(taxon = \"Archaea\", primer = \"Bates\"), ncol = 2)\n\n\n\n\n\n\n\n\nIt’s a bit unrealistic to design the perfect primer. But, it’s certainly possible to quantify and explore in silico primer bias and to interpret results with the bias in mind. It’s really great to see how the EMP folks have improved the 515F primer to hit more Crenarchaea. One suggestion from our analysis today is to add degeneracy at the 3’ end to account for TM7 and many members of more abundant groups. The current EMP 515F primer is 5’-GTGYCAGCMGCCGCGGTAA-3’ but it might be useful to change that to 5’-GTGYCAGCMGCCGCGGTVA-3’.\nI’m also wondering if you could just chop off the last two nucleotides? This would drop the annealing temp but perhaps it would be negligible(?).\nHere is what the proposed 515F looks like against Bacteria. You can see that it hits TM7 and the second most abundant target with zero mismatches.\n\ndf_targets[\"proposed\"] = df_targets[\"515F\"].apply(lambda x: count_subs(x, \"(GTG[CT]CAGC[CA]GCCGCGGT[AGC]A){e}\"))\n%R -i df_targets\n\n\n%%R -w 1300 -h 500\nprimer_plot(primer = \"proposed\")\n\n\n\n\n\n\n\n\nAnd we can address the questions from above.\n\nDo 515F primers account for the 3’ differences between the three most abundant targets? If not, what are the implications?\n\n\nNo. Current 515F primers are biased against TM7 and have mismatches at the 3’ end with sequences throughout the most commonly found bacterial phyla (although current primers do hit the most abundant target in Archaea and Bacteria with zero mismatches and there’s only one mismatch between current targets and most bacterial targets). So, on the whole, the latest primers are great but still room for improvement.\n\n\nDoes 515F hit Archaea and Bacteria equally well?\n\n\nI would say yes, tentatively. The latest EMP primer appears to hit most Archaea with zero mismatches. It also hits most Bacteria with one mismatch or less.\n\n\nDoes 515F hit Nanoarchaea in particular?\n\n\nNo. Nanoarchaea have distinct 515F targets and 515F primers are biased against Nanoarchaea in silico."
  }
]